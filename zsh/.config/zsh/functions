#!/bin/sh

# generate ssh key pair
# e.g. ssh-keygen <email>
sshkey-gen() {
    whiptail --title "SSH Key" --yesno "Generate SSH key?" 8 78 || return
    username || error "Could not get username."
    if [ ! -d "/home/$USERNAME/.ssh" ]; then
        sudo -u $USERNAME mkdir -p "/home/$USERNAME/.ssh"
    fi
    EMAIL=$(whiptail --title "SSH Keygen" --inputbox "Enter email" 8 78 3>&1 1>&2 2>&3) || return
    KEYNAME=$(whiptail --title "SSH Keygen" --inputbox "Enter key's name" 8 78 "id_ed25519" 3>&1 1>&2 2>&3) || return
    PASSPHRASE=$(whiptail --title "SSH Keygen" --passwordbox "Enter passphrase (empty for no passphrase)" 8 78 3>&1 1>&2 2>&3) || return
    ssh-keygen -t ed25519 -f /home/$USERNAME/.ssh/$KEYNAME -q -N "$PASSPHRASE" -C $EMAIL
    unset EMAIL KEYNAME PASSPHRASE
}

# push using a specific key
# e.g. -> gitssh <keyname> push origin main
gitssh() {
    COMMAND="ssh -i ~/.ssh/${1}_ed25519 -o IdentitiesOnly=yes"
    shift
    GIT_SSH_COMMAND="$COMMAND" git "$@"
}

gpg-generate() {
    gpg --expert --full-gen-key
}

# gpg list keys
# e.g. gpg-list
gpg-list() {
    gpg --list-secret-keys --keyid-format LONG --with-subkey-fingerprint
}

# gpg edit key
# e.g. gpg-edit <keyid>
gpg-edit() {
    gpg --expert --edit-key "$1"
}

# gpg export qrcode public key (ascii armored output)
# e.g. gpg-export-pub <keyid> <path/to/png>
gpg-export-pub() {
    [ -z ${1+x} ] && { echo "key is unset"; exit 1; }
    [ -z ${2+x} ] && { set 2 "key_pub.png"; }

    gpg --export -a "$1"! | qrencode -o "$2"
}

# gpg export qrcode private (sub)key (ascii armored output)
# e.g. gpg-export <keyid> <path/to/png>
gpg-export() {
    [ -z ${1+x} ] && { echo "key is unset"; exit 1; }
    [ -z ${2+x} ] && { set 2 "key.png"; }

    gpg --export-secret-subkeys -a "$1"! | qrencode -o "$2"
}

# get from url
# e.g. get-media <url> <path/to/cookies>
get-media() {
    [ -z ${1+x} ] && { echo "source is unset"; exit 1; }
    if [ -z ${2+x} ]; then
        yt-dlp "'$1'"
    else
        yt-dlp --cookies "$2" "'$1'"
    fi
}

# scan qr code
# e.g. scan-qrcode <path/to/qrcode/png>
scan-qrcode() {
    [ -z ${1+x} ] && { echo "source is unset"; return 1; }
    zbarimg -q "$1"
} 

# rsync copy
# e.g. rcp <source> <destination>
rcp() {
    [ "$#" -lt 2 ] && { echo "Usage: rcp [rsync options] source destination"; return 1 }
    local start end elapsed

    start=$(date +%s)

    rsync -ah --info=progress2 "$@"
    local exit_code=$?

    end=$(date +%s)
    elapsed=$((end - start))

    # Format and print elapsed time
    printf "\nTotal time: %02d:%02d:%02d\n" \
    $((elapsed / 3600)) $((elapsed % 3600 / 60)) $((elapsed % 60))

    return $exit_code
}

# rsync move
# e.g. rmv <source> <destination>
rmv() {
    [ "$#" -lt 2 ] && { echo "Usage: rmv [rsync options] source destination"; return 1 }
    local start end elapsed

    start=$(date +%s)

    rsync -ah --info=progress2 --remove-source-files "$@"
    local exit_code=$?

    end=$(date +%s)
    elapsed=$((end - start))

    # Format and print elapsed time
    printf "\nTotal time: %02d:%02d:%02d\n" \
    $((elapsed / 3600)) $((elapsed % 3600 / 60)) $((elapsed % 60))

    return $exit_code
}

# vpn
# for this and the other function link to shortcuts that open a floating terminal with whiptail
# vpn_on() {
#     DIR="/etc/wireguard"
#     wg_configs=()
#
#     for file in "$DIR"/*; do
#         if [[ -f "$file" ]]; then
#             wg_configs+=("$(basename "$file" | sed 's/\.[^.]*$//')")
#         fi
#     done
#     whiptail --title "Operations" --checklist "Select Operation" 22 80 14 "${wg_configs[@]}"
# }

# mount
# mount_usb() {
#     sudo mount /dev/sdd1 ~/mnt -o uid=$(id -u),gid=$(id -g)
# }
