#!/bin/sh

DISTRO=$(awk '/DISTRIB_ID=/' /etc/*-release | sed 's/DISTRIB_ID=//' | tr '[:upper:]' '[:lower:]')
AURHELPER=yay

error() {
	# Log to stderr and exit with failure.
	printf "%s\n" "$1" >&2
	exit 1
}

pkgcheck() {
    if pacman -Qi $1 &> /dev/null; then
        tput setaf 2
        echo "The package "$1" is already installed"
        tput sgr0
        true
    else
        tput setaf 1
        echo "Package "$1" has NOT been installed"
        tput sgr0
        false
    fi
}

pkginstall() {
    username=$1
    shift
    for item in "$@"; do
	if ! pkgcheck $item; then
	    # pacman installation
	    if pacman -Ss $item &> /dev/null; then
		tput setaf 3
		echo "Installing package "$item" with pacman"
		tput sgr0
		pacman -S --noconfirm --needed $item
	    # Aur helper installation
	    elif pacman -Qi $AURHELPER &> /dev/null; then
		tput setaf 3
		echo "Installing package "$item" with "$AURHELPER""
		tput sgr0
		sudo -u "$username" $AURHELPER -S --noconfirm $item
	    else
		tput setaf 3
		echo "Installing package "$item" from source"
		tput 
		rm -rf "/tmp/$item"
		sudo -u "$username" mkdir -p "/tmp/$item"
		sudo -u "$username" git -C "/tmp" clone --depth 1 --single-branch --no-tags -q "https://aur.archlinux.org/$item.git" "/tmp/$item" ||
		{
			cd "/tmp/$item" || return 1
			sudo -u "$name" git pull --force origin master
		}
		cd "/tmp/$item" || exit 1
		sudo -u "$username" -D "/tmp/$item" makepkg --noconfirm -si >/dev/null 2>&1 || return 1
	    fi
	fi
    done
}

basicutils() {
    whiptail --title "Install Basics" --yesno "Install basic packages?" 8 78 || return

    pacman --noconfirm -Sy archlinux-keyring >/dev/null 2>&1

    base=(sudo sed curl stow unzip git)
    pkginstall root ${base[@]} || "Error: could not install BASIC packages."
}

adduser() {
    whiptail --title "Add User" --yesno "Add new user?" 8 78 || return

    NAME=$(whiptail --inputbox "Enter username" 8 78 --title "Add User" 3>&1 1>&2 2>&3) || return
    while ! echo "$NAME" | grep -q "^[a-z_][a-z0-9_-]*$"; do
	NAME=$(whiptail --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." 8 78 --title "Add User" 3>&1 1>&2 2>&3 3>&1) || return
    done

    if id -u "$NAME" >/dev/null 2>&1; then 
	whiptail --title "Warning" --msgbox "The user already exist." 8 78
	return
    fi

    PASS=$(whiptail --passwordbox "Enter password" 8 78 --title "Add User" 3>&1 1>&2 2>&3) || return

    useradd -m -g wheel -s /bin/zsh "$NAME" >/dev/null 2>&1 || usermod -a -G wheel "$NAME" && mkdir -p /home/"$NAME" && chown "$NAME":wheel /home/"$NAME"
    echo "$NAME:$PASS" | chpasswd
    unset PASS 
}

username() {
    if [ -z $NAME ]; then
	echo NAME=$(whiptail --inputbox "Enter the username." 8 78 3>&1 1>&2 2>&3) || return
    fi
}

userrepo() {
    username() || error "Could not get username."

    if [ -z $REPODIR ]; then
	echo REPODIR=/home/$NAME/$(whiptail --inputbox "Enter repository directory." 8 78 3>&1 1>&2 2>&3) || return
    fi

    if [ ! -d $REPODIR ]; then
	sudo -u $NAME mkdir -p $REPODIR
    fi
}

aurhelper() {
    whiptail --title "Install the AUR helper?" --yesno "AUR helper" 8 78 || return

    username() || error "Could not get username."

    pkginstall $NAME $AURHELPER
}


dotfiles() {
    whiptail --title "Install Dofiles?" --yesno "Dotfiles" 8 78 || return
    userrepo() || error "Could not get repository directory."
    
    # fetch dotfiles if not present in the repository directory
    if [ ! -d "$REPODIR/dotfiles" ]; then
	sudo -u $NAME git clone https://github.com/nash169/dotfiles.git $REPODIR/dotfiles
    fi

    # check if .config folder is present to stow dotfiles later
    if [ ! -d "/home/$NAME/.config" ]; then
	sudo -u $NAME mkdir -p /home/$NAME/.config
    fi
}

desktop() {
    whiptail --title "Install Desktop?" --yesno "Desktop" 8 78 || return
    dotfiles() || error "Could not fetch the dotfiles."

    desktop=(xorg-server xorg-xwininfo xorg-xinit xorg-xprop xorg-xdpyinfo xorg-xbacklight xorg-xrandr xorg-xrdb xorg-xbacklight xcompmgr feh slock dmenu)
    pkginstall $NAME ${desktop[@]} || "Error: could not install XORG packages."

    sudo -u $NAME git clone https://github.com/nash169/dwm.git $REPODIR/dwm 
    sudo -u $NAME git -C $REPODIR/dwm remote add upstream git://git.suckless.org/dwm 
    sudo -u $NAME git -C $REPODIR/dwm fetch upstream
    sudo -u $NAME git -C $REPODIR/dwm merge upstream/master
    sudo -u $NAME git -C $REPODIR/dwm checkout custom
    sudo -u $NAME git -C $REPODIR/dwm rebase upstream/master
    
    if [ ! -d "$REPODIR/dotfiles" ]; then
	sudo -u stow -d $REPODIR/dotfiles -S font -t /home/$NAME 
	sudo -u stow -d $REPODIR/dotfiles -S walls -t /home/$NAME 
	sudo -u stow -d $REPODIR/dotfiles -S xserver -t /home/$NAME 
	sudo -u stow -d $REPODIR/dotfiles -S dwm -t $REPODIR/dwm 
    fi

    cd $REPODIR/dwm && sudo -u $NAME make install
}

terminal() {
    whiptail --title "Install Terminal?" --yesno "Terminal" 8 78 || return
    dotfiles() || error "Could not fetch the dotfiles."

    sudo -u $NAME git clone git@github.com:nash169/st.git $REPODIR/st 
    sudo -u $NAME git -C $REPODIR/st remote add upstream git://git.suckless.org/st 
    sudo -u $NAME git -C $REPODIR/st fetch upstream
    sudo -u $NAME git -C $REPODIR/st merge upstream/master
    sudo -u $NAME git -C $REPODIR/st checkout custom
    sudo -u $NAME git -C $REPODIR/st rebase upstream/master

    if [ ! -d "$REPODIR/dotfiles" ]; then
	sudo -u stow -d $REPODIR/dotfiles -S font -t /home/$NAME 
	sudo -u stow -d $REPODIR/dotfiles -S st -t $REPODIR/st 
    fi

    cd $REPODIR/st && sudo -u $NAME make install
}

shell() {
    whiptail --title "Install Shell?" --yesno "Shell" 8 78 || return
    dotfiles() || error "Could not fetch the dotfiles."

    shell=(tmux exa bat zsh zsh-completions zsh-autosuggestions zsh-syntax-highlighting)
    pkginstall $NAME ${shell[@]} || "Error: could not install SHELL packages."
    chsh -s /bin/zsh "$NAME" >/dev/null 2>&1

    if [ ! -d "$REPODIR/dotfiles" ]; then
	sudo -u $NAME stow -d $REPODIR/dotfiles -S zsh -t /home/$NAME
    fi
}

explorer() {
    whiptail --title "Install Explorer?" --yesno "Explorer" 8 78 || return
    dotfiles() || error "Could not fetch the dotfiles."

    explorer=(ripgrep fzf lf-git ueberzug)
    pkginstall $1 ${explorer[@]} || "Error: could not install EXPLORER packages."

    if [ ! -d "$REPODIR/dotfiles" ]; then
	sudo -u $NAME stow -d $REPODIR/dotfiles -S lf -t /home/$NAME
    fi
}

editor() {
    whiptail --title "Install Editor?" --yesno "Editor" 8 78 || return
    dotfiles() || error "Could not fetch the dotfiles."

    editor=(neovim python-pynvim texlive-bin texlive-fontsrecomended texlive-latexextra texlive-latexrecomended texlive-latex texlive-basic texlive-xetex texlive-mathscience texlive-fontsextra texlive-langenglish texlive-context texlive-luatex texlive-plaingeneric texlive-binextra texlive-bibtexextra texlive-pictures texlive-langfrench texlive-langgerman texlive-fontutils) # ninja tree-sitter lua luarocks
    pkginstall $1 ${editor[@]} || "Error: could not install EDITOR packages."

    if [ ! -d "$REPODIR/dotfiles" ]; then
	sudo -u $NAME stow -d $REPODIR/dotfiles -S nvim -t /home/$NAME
    fi
}

email() {
    email=(mutt-wizard-git)
    pkginstall $1 ${email[@]} || "Error: could not install EMAIL packages."
}

mediasuite() {
    multimedia=(sxiv mpd mpc mpv)
    pkginstall $1 ${multimedia[@]} || "Error: could not install MULTIMEDIA packages."

    reader=(zathura zathura-pdf-mupdf zotero)
    pkginstall $1 ${reader[@]} || "Error: could not install READER packages."
}

download() {
    whiptail --title "Install Download Tools?" --yesno "Download" 8 78 || return
    dotfiles() || error "Could not fetch the dotfiles."

    download=(rtorrent youtube-dl)
    pkginstall $1 ${download[@]} || "Error: could not install DOWNLOAD packages."
}

bluetooth() {
    bluetooth=(pulseaudio-bluetooth bluez bluez-libs bluez-utils blueberry)
    pkginstall $1 ${bluetooth[@]} || "Error: could not install BLUETOOTH packages."
    systemctl enable bluetooth.service
    systemctl start bluetooth.service
    sed -i 's/'#AutoEnable=false'/'AutoEnable=true'/g' /etc/bluetooth/main.conf
}

audio() {
    audio=(wireplumber pipewire-pulse pulsemixer)
    pkginstall $1 ${audio[@]} || "Error: could not install AUDIO packages."
}

browser() {
    browser=(firefox)
    pkginstall $1 ${browser[@]} || "Error: could not install BROWSER packages."
}

devtools() {
    develop=(cmake eigen clang)
    pkginstall $1 ${develop[@]} || "Error: could not install DEVELOP packages."
    cd /home/$1/developments/linux-config/configs && sudo -u $1 stow format -t /home/$1/
}

sshclient() {
    cd /home/$1/developments/linux-config/configs && sudo -u $1 stow ssh -t /home/$1/
    ssh=(openssh keychain)
    pkginstall $1 ${ssh[@]} || "Error: could not install SSH packages."
    read -p "Insert your email: " email
    sudo -u $1 ssh-keygen -t ed25519 -C "$email"
    sudo -u $1 git config --global user.email "$email"
}
